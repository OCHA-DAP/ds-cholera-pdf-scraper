#!/usr/bin/env python3
"""
Test a previously generated self-coding script directly.

This script allows you to run and debug the Python scripts that were
generated by the self-coding preprocessor system.

Usage:
    python scripts/test_generated_script.py --script-path logs/generated_scripts/Week_28__7_-_13_July_2025_20250905_123456_main.py
    python scripts/test_generated_script.py --list-scripts
    python scripts/test_generated_script.py --latest
"""

import argparse
import json
import subprocess
import sys
from pathlib import Path

from src.config import Config


def list_generated_scripts():
    """List all available generated scripts."""
    script_logs_dir = Path(Config.LOGS_DIR) / "generated_scripts"

    if not script_logs_dir.exists():
        print("❌ No generated scripts directory found")
        return

    scripts = list(script_logs_dir.glob("*.py"))
    metadata_files = list(script_logs_dir.glob("*_metadata.json"))

    if not scripts:
        print("❌ No generated scripts found")
        return

    print(f"📁 Found {len(scripts)} generated scripts:")
    print(f"📍 Location: {script_logs_dir}")
    print()

    # Group by timestamp
    script_groups = {}
    for script in scripts:
        parts = script.stem.split("_")
        if len(parts) >= 3:
            pdf_name = parts[0]
            timestamp = parts[1] + "_" + parts[2]
            key = f"{pdf_name}_{timestamp}"
            if key not in script_groups:
                script_groups[key] = []
            script_groups[key].append(script)

    for group_key, group_scripts in sorted(script_groups.items()):
        pdf_name, timestamp = group_key.rsplit("_", 1)

        # Try to find metadata
        metadata_file = script_logs_dir / f"{group_key}_metadata.json"
        metadata = {}
        if metadata_file.exists():
            try:
                metadata = json.loads(metadata_file.read_text())
            except:
                pass

        print(f"📄 {pdf_name} ({timestamp})")
        if metadata.get("record_count") is not None:
            print(f"   📊 Records: {metadata['record_count']}")
        if metadata.get("attempt"):
            print(f"   🔄 Attempt: {metadata['attempt']}")

        for script in group_scripts:
            print(f"   📝 {script.name}")
        print()


def get_latest_script():
    """Get the most recently generated script."""
    script_logs_dir = Path(Config.LOGS_DIR) / "generated_scripts"

    if not script_logs_dir.exists():
        return None

    scripts = list(script_logs_dir.glob("*.py"))
    if not scripts:
        return None

    # Sort by modification time, get latest
    return max(scripts, key=lambda x: x.stat().st_mtime)


def test_script(script_path: Path, pdf_path: str = None):
    """Test a generated script."""
    if not script_path.exists():
        print(f"❌ Script not found: {script_path}")
        return False

    # Use default PDF if none provided
    if pdf_path is None:
        pdf_path = str(
            Path(Config.LOCAL_DIR_BASE)
            / "Cholera - General"
            / "WHO_bulletins_historical"
            / "Week_28__7_-_13_July_2025.pdf"
        )

    if not Path(pdf_path).exists():
        print(f"❌ PDF not found: {pdf_path}")
        return False

    print(f"🧪 Testing script: {script_path.name}")
    print(f"📄 With PDF: {Path(pdf_path).name}")
    print()

    # Change to script directory for execution
    script_dir = script_path.parent

    try:
        # Run the script
        cmd = [sys.executable, script_path.name, "--pdf", pdf_path]
        print(f"🚀 Running: {' '.join(cmd)}")
        print(f"📁 Working directory: {script_dir}")
        print()

        result = subprocess.run(
            cmd, cwd=script_dir, capture_output=True, text=True, timeout=120
        )

        print("📤 STDOUT:")
        print(result.stdout)
        print()

        if result.stderr:
            print("📤 STDERR:")
            print(result.stderr)
            print()

        print(f"🏁 Exit code: {result.returncode}")

        # Check for result.json
        result_json = script_dir / "result.json"
        if result_json.exists():
            try:
                data = json.loads(result_json.read_text())
                print(f"📊 Result: {len(data)} records extracted")

                if data:
                    print("📋 First record sample:")
                    first_record = data[0]
                    for key, value in first_record.items():
                        if isinstance(value, str) and len(value) > 50:
                            value = value[:47] + "..."
                        print(f"   {key}: {value}")

            except json.JSONDecodeError as e:
                print(f"❌ Invalid JSON in result.json: {e}")
        else:
            print("❌ No result.json found")

        return result.returncode == 0

    except subprocess.TimeoutExpired:
        print("❌ Script execution timed out (120 seconds)")
        return False
    except Exception as e:
        print(f"❌ Error running script: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="Test generated self-coding scripts")
    parser.add_argument("--script-path", type=str, help="Path to script to test")
    parser.add_argument("--pdf-path", type=str, help="Path to PDF file to test with")
    parser.add_argument(
        "--list-scripts", action="store_true", help="List all generated scripts"
    )
    parser.add_argument(
        "--latest", action="store_true", help="Test the latest generated script"
    )

    args = parser.parse_args()

    if args.list_scripts:
        list_generated_scripts()
        return

    if args.latest:
        latest_script = get_latest_script()
        if latest_script:
            print(f"🎯 Testing latest script: {latest_script.name}")
            test_script(latest_script, args.pdf_path)
        else:
            print("❌ No generated scripts found")
        return

    if args.script_path:
        script_path = Path(args.script_path)
        test_script(script_path, args.pdf_path)
        return

    # Default: list scripts
    print("📋 Use --help for options. Here are available scripts:")
    list_generated_scripts()


if __name__ == "__main__":
    main()
